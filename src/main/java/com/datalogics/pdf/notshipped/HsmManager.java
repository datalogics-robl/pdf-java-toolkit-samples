/*
 * Copyright 2015 Datalogics, Inc.
 */

package com.datalogics.pdf.notshipped;

import com.safenetinc.luna.LunaSlotManager;
import com.safenetinc.luna.provider.LunaCertificateX509;
import com.safenetinc.luna.provider.LunaProvider;

// ****************************************************************************
// Copyright (c) 2010 SafeNet, Inc. All rights reserved.
//
// All rights reserved. This file contains information that is
// proprietary to SafeNet, Inc. and may not be distributed
// or copied without written consent from SafeNet, Inc.
// ****************************************************************************

import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Security;
import java.security.cert.Certificate;
import java.util.Date;

/**
 * This is a simple example of logging in to the HSM.
 */
public class HsmManager {

    public static LunaSlotManager slotManager = null;

    /**
     * Performs a login operation using the LunaSlotManager. The login operation occurs on the given tokenLabel or the
     * first available slot if tokenLabel is null. NOTE: tokenLabel is synonymous with partition name.
     *
     * @param tokenLabel
     * @param password
     * @return a boolean indicating if the login was successful
     */
    public static boolean hsmLogin(final String tokenLabel, final String password) {

        // Initialize the SlotManager class
        slotManager = LunaSlotManager.getInstance();

        try {
            // Login to the HSM
            /*
             * This method unlocks the token for use. There are multiple methods available within the LunaSlotManager
             * class to login to the HSM:
             *
             * Login to the first available partition: login(String password)
             *
             * Login to the partition at the specified slot: login(int slot, String password)
             *
             * Login to the partition with the specified label: login(String TokenLabel, String password)
             *
             * Login to the partition with the specified user role: login(int slot, UserRole userType, String password)
             *
             * The password argument is the challenge password for the Luna SA partition or HSM. (Applications generally
             * ask for password information interactively from the user.)
             */
            if (tokenLabel == null) {
                slotManager.login(password);
            } else {
                slotManager.login(tokenLabel, password);
            }
        } catch (final Exception e) {
            System.out.println("Exception during login: " + e.getMessage());
        }
        return slotManager.isLoggedIn();
    }

    /**
     * Shows the total number of objects stored on the slot.
     */
    public static void showObjectCount() {
        try {
            System.out.println("Number of objects currently stored on HSM slot "
                               + slotManager.getDefaultSlot() + ": "
                               + slotManager.getCurrentObjectCount());

        } catch (final Exception e) {
            System.out.println("Exception while getting HSM object status: "
                               + e.getMessage());
            System.exit(1);
        }
    }

    /**
     * Logs out of the default session
     */
    public static void hsmLogout() {
        /*
         * When you are done using the Luna HSM, it is customary to log out of the HSM to prevent unauthorized access at
         * a later point in your application.
         *
         * Only use the LunaSlotManager.logout() method if you used one of the LunaSlotManager.login() methods for
         * opening access to the HSM. If you use an external login method, you will need to use an external logout
         * method.
         */
        slotManager.logout();
    }

    /**
     * returns a KeyPair generated by the LunaProvider.
     *
     * @return KeyPair
     * @throws Exception
     */
    public static KeyPair getLunaHSMKey() throws Exception {
        if (Security.getProvider("LunaProvider") == null) {
            System.out.println("Adding LunaProvider");
            Security.addProvider(new LunaProvider());
        }

        KeyPairGenerator keyGen = null;
        KeyPair RSAkeypair = null;
        try {
            // Generate an 1024-bit RSA KeyPair
            /*
             * The KeyPairGenerator class is used to determine the type of KeyPair being generated. The most common
             * options for this are RSA or DSA.
             *
             * For more information concerning the algorithms available in the Luna provider please see the Luna
             * Development Guide. For more information concerning other providers, please read the documentation
             * available for the provider in question.
             */
            System.out.println("Generating RSA Keypair");
            /*
             * The KeyPairGenerator.getInstance method also supports specifying providers as a parameter to the method.
             *
             * keyGen = KeyPairGenerator.getInstance("RSA", "Luna"); - which specifies the Luna provider for the RSA
             * KeyPair generation or keyGen = KeyPairGenerator.getInstance("RSA", "SUN"); - which uses the Sun provider
             * for the RSA KeyPair generation
             *
             * Many other methods will allow you to specify the provider as a parameter. Please see the Sun JDK class
             * reference at http://java.sun.org for more information.
             */
            keyGen = KeyPairGenerator.getInstance("RSA", "LunaProvider");
            keyGen.initialize(1024);
            RSAkeypair = keyGen.generateKeyPair();
        } catch (final Exception e) {
            System.out.println("Exception during Key Generation - "
                               + e.getMessage());
            e.printStackTrace();
            throw e;
        }

        return RSAkeypair;
    }

    /**
     * returns a self-signed certificate valid for 1 year.
     *
     * @param RSAkeypair
     * @param subjectName if not set, defaults to "CN=Datalogics, L=Chicago, C=US"
     * @return a 1 item Array of Certificates.
     * @throws Exception
     */
    public static Certificate[] createSelfSignedCertChain(final KeyPair RSAkeypair, final String subjectName)
                    throws Exception {

        String subjName;
        if (subjectName == null) {
            subjName = "CN=Datalogics, L=Chicago, C=US";
        } else {
            subjName = subjectName;
        }

        final long yearInMilliSeconds = (1000 * 60 * 60 * 24 * 365);

        LunaCertificateX509[] certChain = null;
        try {
            certChain = new LunaCertificateX509[1];
            final Date notBefore = new Date();
            final Long tick = new Long(notBefore.getTime());

            final Date notAfter = new Date(tick + yearInMilliSeconds); //

            final BigInteger serialNumber = new BigInteger(tick.toString());

            // The LunaCertificateX509 class has a special method that allows
            // you to self-sign a certificate.
            certChain[0] = LunaCertificateX509.SelfSign(RSAkeypair,
                                                        subjName, serialNumber, notBefore, notAfter);
        } catch (final Exception e) {
            System.out.println("Exception during Certification Creation - "
                               + e.getMessage());
            e.printStackTrace();
            throw e;
        }

        return certChain;
    }

}
